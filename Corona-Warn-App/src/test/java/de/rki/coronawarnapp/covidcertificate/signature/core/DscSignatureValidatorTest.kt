package de.rki.coronawarnapp.covidcertificate.signature.core

import de.rki.coronawarnapp.covidcertificate.DaggerCovidCertificateTestComponent
import de.rki.coronawarnapp.covidcertificate.common.certificate.DccQrCodeExtractor
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_EXPIRED
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_NOT_YET_VALID
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_NO_MATCH
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_OID_MISMATCH_RC
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_OID_MISMATCH_TC
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_OID_MISMATCH_VC
import de.rki.coronawarnapp.server.protocols.internal.dgc.DscListOuterClass
import okio.ByteString.Companion.decodeBase64
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import testhelpers.BaseTest
import de.rki.coronawarnapp.util.toOkioByteString
import io.kotest.assertions.throwables.shouldNotThrow
import io.kotest.assertions.throwables.shouldThrow
import io.kotest.matchers.shouldBe
import javax.inject.Inject

@Suppress("MaxLineLength")
class DscSignatureValidatorTest : BaseTest() {

    @Inject lateinit var extractor: DccQrCodeExtractor

    @BeforeEach
    fun setup() {
        DaggerCovidCertificateTestComponent.factory().create().inject(this)
    }

    /**
     * Test cases https://github.com/corona-warn-app/cwa-app-tech-spec/blob/78009f7e3aa6aef56892caedcfe478bfb9d4d691/docs/spec/dgc-overview-client.md#sample-data-for-protocol-buffer-message-for-dsclist
     */

    @Test
    fun `validating tc=fail, vc=fail, rc=pass - forRCsWithOID`() {
        val rc =

        val vc =

        val tc =


        val dscData1 = filterDscData("3seKUa2SxU0=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_TC

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_VC

        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    @Test
    fun `validating tc=pass, vc=pass, rc=pass - forAllDCCsNoOID`() {
        val tc =

        val vc =

        val rc =


        val dscData1 = filterDscData("6LVeJLKcq3s=")
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    @Test
    fun `validating tc=fail, vc=pass, rc=fail - forVCsWithOID`() {
        val tc =

        val vc =

        val rc =
            "HC1:6BFOXN*TS0BI\$ZD-PH.SGLV7ULO81KY72I:ID+4WFNJ59V2S2/D-RISGVGKO-MPW\$NLEENKE\$JDVPLW1KD0KSKE MCAOIC.U2VA0*PE I: KH NH8JY\$NR+PC.UKMI4.1*-37CPOQ6AYP1KQ7 O4A7E:7LYP9TQH99+EQHCRCU7BDL8FF0D9E2LBHHGKLO-K%FGMIA6EAYHILIIX2MCJJJGI1JAF.7%TTP+P6OIB.VT*QNC2BFUF\$SU%BO*N5PIBPIAOI5XIXCLZRE/DD-B5V12JFQ%P82%KYZP8 FUL8W2BJH0NEQ:Q67ZMA\$6ERRF2MM*S\$USU6E%03E.SDFT3VCWQTY8TC6U8/DQMC:Y3XEO KU+*CJ8OSDDM\$7W:RA+JZ\$J64OP+B4EN1KMOZVKZ0MTO0HL5VFZYI3260NRYYDZ7V8\$TANV0CW+P1:6U5XM+S5*3P6RV4\$DX-EB50B1KZ3"
        val dscData1 = filterDscData("ACkfCcHlSWY=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_TC

        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_RC
    }

    @Test
    fun `validating tc=fail, vc=fail, rc=pass - forRCsWithOIDWithZero`() {
        val tc =

        val vc =

        val rc =

        val dscData1 = filterDscData("GEXba2UJLGM=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_TC

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_VC

        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    @Test
    fun `validating tc=fail, vc=pass, rc=fail - forVCsWithOIDWithZero`() {
        val tc =
            "HC1:6BFOXN*TS0BI\$ZDYSH.:BSP5/*L1DW:D4IK0-36OLNAOMIZ4A-H*ZO:.I4091GPQHIZC4TPIFRMLNKNM8JI0EUG*%NH\$RLF95HF2NSF+I2IL1FD+73 MV E7 0T5.I9NTBY47NSVHIF4M1FD2V4E-34*7I6WE/DZI9\$JAQJKPLNX2M KMAHI6JCQ SA KZ*U0I1-I0*OC6H0/VM\$NI Q1610AJ27K2-TII*NND134C AI%.3Q.4-KTBPS-JT923/T2ZQTHBCGNSIZI+BJ/8DB:DFVA5TBPEDG8C5DL0AC.PDLQ3-8D. CTVDZ9CA\$D6VCF9CZXIXVGYNDYLIV%65GP1Q2EG3RA3/43YF32878IN KLWU4U5Q8EFD 8*E1YE9/MVNAU3ZC54JS/S7*KO%I CF7:4OHT-3TB6JS1J6:IZW4I:A6J3ARN QT1BGL4OMJKR.K\$A1K02-UVX*2+A4LHC -D5LO/FG.3LBJK90L5B2- 4%/C172/QIFUDM07W6G1MBZ0UDNV3B1I.P:MK0.VJUT7%DU76YMTNPRXF7*7VRP5OY67GTGQ5NLN\$W7SFS0YS.GJZVT.BWL8EU*TF 6T:R.AR7404I7Q2"
        val vc =

        val rc =


        val dscData1 = filterDscData("LnWaCCrE/nw=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_TC

        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_RC
    }

    @Test
    fun `validating tc=pass, vc=fail, rc=fail - forTCsWithOID`() {
        val tc =

        val vc =

        val rc =
            "HC1:6BFOXN*TS0BI\$ZDFRH1HUE7I8Y8MM6SM4LR5+T94FEOGIXNNBWLM*4-GU RECV4*XUA2PWKP/HLIJL8JF8JF7LPMIH-O93UQBJA/J9KPA2UQBJAMZU1THYZQ H9+VFC.N/UIK8G56CDJSG+SB.V Q5-L99M6AL8PZBTVK0QKH:SUZ4+FJE 4Y3LL/II 0SC9NY8G%89-8CNNQ7TVZ0YE9/MV:QDOH6PO9:TUQJAJG9-*NIRICVELZUZM9EN9-O97LAUGSNX1IMIWG9\$R78L4UP82%KYZP8 FUL8W2BJH0NEQ:Q67ZMA\$6ERRP0MB+2+ T\$-39BC%+3ZPTJ0DMED/KT-*TXUS9PS:Y3Z9AY38TRL0WQ149.9MQ P1:9BES:ZLSPJ2GWL/R\$Y7V5OO:IC5I%BT7*O+4P9K2YIJ7XRS:3Z8NVYFLHF0.L\$EC4*ENSSO/L72IIBALA00KCF5"
        val dscData1 = filterDscData("U5lI1XIimH0=")
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_VC

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_RC
    }

    @Test
    fun `validating tc=pass, vc=pass, rc=pass - forAllDCCsAllOIDsWithZero`() {
        val tc =

        val vc =

        val rc =
            "HC1:6BFOXN*TS0BI\$ZDFRHHRRM3M3\$FS/J439SFBZEJ8USXG46VE61I:X98NS2/ACV4*XUA2PWKP/HLIJL8JF8JF7LPMIH-O93UQ6HA/HGM472W5J/R0+K\$HM-*KSA7G6MH1R%1SYW6CA7G6M:1SHZ49D6XV44A7E:7LYP9TQBK83FQHCRGH4BDL8FF0D9E2LBHHGKLO-K%FGMIA6EAYHIM82/3QHCR:36/97J9DYIALEE-7A%IA%DA9MGF:F81H23DLEE+-C/DD6IA/E3Y.L7ED+G9AXGDAD1QD8IIKYJHIKDBCLTSL1E.G0D0HT0HB2PV48:+PF 7LVK\$1QOH86 BZV5LR1YSKU 9KWHPF000S6C0PO3KOI0\$CMLQ\$NRABN.WMA8ICWV-HCX71*/H23QLZL1PJ51UOZUG6FX8MQ+O\$PPP4S/C7/LD4ZFJNO5VV Y9DU881NR3C+S71NV8BQI/7+ABZYE"
        val dscData1 = filterDscData("ZuMKxY6pQr8=")
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    @Test
    fun `validating tc=fail, vc=fail, rc=fail - expired`() {
        val tc =
            "HC1:6BFOXN*TS0BI\$ZDFRH7N1COH6MEM4J:D4IK0-36OLNAOMIZ40.H5DO:.IZ39NFOQHIZC4TPIFRMLNKNM8JI0EUG*%NH\$RLF9\$HFY:J0GH1FDKB3CGHR A8EF*JJ9NT/Y4*:JD2I1FD2V424ORCAS0IBB4HJP7NVDEB\$/IL2J5\$0H78DAB2DNAHLW 70SO:GOLIROGO3T5ZXKWUPWGO-DQDCLG9RD95O7NETQM9S5342+P7O521QF0PMDOE+P-CRUT5IO6D PL956D6XHQ\$ZOUHL-IN5TQKCO9ADELNIHICCH.*G\$IIN+IJIH4HGN+IRB8GG9IOIED91KKN+I99414NB75EHPSGO0IQG40*E9/-11W5DDAGN9K6QKJPDILW46PK9O.0E:7IWMVP4E:7J/M6V82M7YA7B9RT9MZS4: KWP4BD7JK8+GOR.OS8S8S0BT1/T1%%H\$DG%76T+1:96CT1:/6QB164VZ9E/Q60D1DIE731Q-E4OUN7E/-R4/VZIOA+TK2NV4Q5VTJEFK\$Q3PUU-4PYIC2P+BO29KQPK6BDIJHT6G52MK\$D\$\$9D VRSJ\$LTE-NWP69JSCT2KZOU1AHD754S:1FO40X6741"
        val vc =

        val rc =
            "HC1:6BFOXN*TS0BI\$ZDFRH7N1COH6MEM4J E4LR5+T94FEOGIXNNKCRM*4-GU9VJ NI4EFSYS1-ST*QGTA4W7.Y7B-S-*O5W49NT/LT2/KL:OOA7SC9OIFM9UKMV71T\$HF9NTUZ4GD8BMOB1M8.7YDDO4N\$AOYP977L8KES/F-1JS-KYIICHGK3M1FE%FAGUU0QIRR97I2HOAXL92L0: KQMK8J4RK46YBDQEVK02%K:XFFL2OH6PO9:TUQJAJG9-*NIRICVELZUZM9EN9-O97LAUGSNX1IMIWG9\$R78L4UP82%KYZP8 FUL8W2BJH0NEQ:Q67ZMA\$6ERR85M3OD09DHKSZ635/2-5T C2 *T0HTRST%VD8F3162YFMBVVN+E60UL/AYWL5 HYYJ-PNIBSYC9B4B5G25UVT14K4R8QDS*3L818*RKBELTT-KSW4IA0C\$A12RF82O8CF*K0 OHLNVRS5PL4V500J3WQE"
        val dscData1 = filterDscData("hAeovR4V0yA=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_EXPIRED

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_EXPIRED

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
            .errorCode shouldBe HC_DSC_EXPIRED
    }

    @Test
    fun `validating tc=fail, vc=fail, rc=fail - notYetValid`() {
        val tc =

        val vc =

        val rc =

        val dscData1 = filterDscData("lVUg/FMSRV4=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_NOT_YET_VALID

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_NOT_YET_VALID

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
            .errorCode shouldBe HC_DSC_NOT_YET_VALID
    }

    @Test
    fun `validating tc=pass, vc=pass, rc=pass - forAllDCCsAllOIDs`() {
        val tc =
            "HC1:6BFOXN*TS0BI\$ZD8UHHPLY614-13BV109C*8NDC2LE \$C5K95WJA5I.I5/5I:%JNO4*J8/Y4F%CD 810H% 0R%0IGF5JNBPI3\$UALG0LA+LABPI\$RU+WJLOECTUUJE/UI2YUPRQ9N8HVOO2WXZQ4H95XJ8 FH-VZVF5SI:TU+MMPZ56%PBT19UEKX9BM9 0BD-I/2DBAJDAJCNB-43 X48YI.FV5DJ5DJBIT+T4U:S+59DPF BFAL78LJPOFOS0M:8.UJ1H3ONV4J7+F3+T4**4523.FJ/U4 /4859Y73JC3DG3LWTAA3/4319B+E3\$IJB7DN33Y73LS4NO2+LPLVG5NJ 73C44XO9QH6 ZPSR9FX9P788%S*EVA*N/PKBR3ZBG4+O5PI5PI6VFA4BM47/97.13VD9O-OEF82E9GX8\$G10QVGB3O1K6.O7Y45W4*LP1Z25\$0P+5GRVR54Z3E/8DXED G0PZH00GQVM/NADFNND80WNWPBIKLFQF\$AGNFN6D9:SJ0VG%WP2N4Z\$TJPFQ3LLVV%17N BXQDMDC2LJ9DV:S9VVLQTVY2OA:DKL6OHEDSG*BP  R5RLV/QB R%Q5IEOYM845CBBN+M7W\$EY+5R R61063M63"
        val vc =

        val rc =
            "HC1:6BFOXN*TS0BI\$ZD8UHHPLY614-13BVU19ELBZEJ8USXG46VE KSTSJFOO\$ZBAN9I6T5XH4PIQJAZGA2:UG%U:PI/E2\$4J /K:*K.9T12JXTC%*400T5IVM4L0YC4/2+*4KCTDYK7YVK1H/8F+*431TIYC8NFQZVHRV9EF5AL5:4A930JBIFTY9J:CA%FAGUU0QIRR97I2HOAXL92L0: KQMK8J4RK46YB9M6NO42%K:XFGM4OH6PO9:TUQJAJG9-*NIRICVELZUZM9EN9-O97LAQCK\$/PBT14SIWG9\$R78L4JO82%KYZP8 FUL8W2BJH0NEQ:Q67ZMA\$6ERRF2M+H3XJCE*S3LT\$8DIYD 2TQVD/HC7VCS.CRGS7+249A0WPFTRACRI+PW.9N\$SHW9 RD9Q3TNS2\$QXQ65FJ+5DSJPG/KNEG:YVCX4LVNV4W DF2BCE/IES8Y UJ3N1:GAY39U4UVB .TL:95105%E84"
        val dscData1 = filterDscData("qslgaOBZviM=")
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    @Test
    fun `validating tc=pass, vc=fail, rc=fail - forTCsWithOIDWithZero`() {
        val tc =

        val vc =

        val rc =
            "HC1:6BFOXN*TS0BI\$ZD8UHS5UQ9J-RU58N20I%UC1RO4.S-OPA+I\$17X5J.I584IH6MNO4*J8/Y4F%CD 810H% 0R%0IGF5JNBPI3\$UD*JQJAMN90TH2UQAVU H2RP2QJA5P2SHA6UM+LACPI2YU7SQ3Y7XQGDVBCPIGSU2VU-T3KVDDVBXUDXTBB.N0YBJMI:TU+MMPZ5TZ9BT1X%EGT1FQH+4JD-I/2DBAJDAJCNB-437Y4WV2Z73423ZQT.EJ3E00OP/48XW4N%2%R0O05L%2A550AT56D7OF\$W2AWCDZILS4C\$KE.Q183/-K6I8*/GVON13P*LP1Z25\$0P+5GRVR54Z3E/8DXEDHF00KOH9S2V7SCR5T4KU6THP9VPTGOZ1S-+QEDOAIRV.QNQOGFE8NA7VP2+FGTMFOR LB2CWD7FIBE3YT3DF35FV-V%MRZWH72B+*3T8D-EOB7T.IV0TI1\$333F0KRNUB*\$AFUNNNUA0QYTE2.Q68R 7AZEF"
        val dscData1 = filterDscData("u9LSjm6zhNM=")
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_VC

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_RC
    }

    @Test
    fun `Cose signature mismatch`() {
        val vc =
            "HC1:6BF2Y2QVP3POSQ2KKSO61KMO6*G25BN JB88US5X7F/E4/LG0YH%0LC733N6Z\$1FFHZI2STO771T0SRGV*8URD3RQO4KVYHO*3GW8N47QS2MHAWMFEGWU8WU867UG5D4HZ:R*-IW*SH-K+FW:-PKBTHETCX8D/6MPDTK0+NV\$2AR3JKZ4QAEFOT1AQR2O+LNE\$MG0U\$ J9LC%*D:5IC/8W*9:HAVK1/H8Z821/1KQU8H9FOAR20K/7J8DNLMC+5SNR:V0L:AA\$CX%PSHFOGMS+G/RS: KFC589E5QPGD57\$IMH2HFDTKARJUUL85MJ1SVV\$P/MJ9-DVN8HQCU8M*DJ6.2PANZ-DTB1CCOWM7 *0CA62\$HKGS*:6SAI:CG+E13.H8S44+B1:0/TCAFH9.HOW9RKG5*AJ/0GSI*4"

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData, dccData(vc)) }
            .errorCode shouldBe HC_DSC_NO_MATCH
    }

    private fun dccData(tc: String) = extractor.extract(tc).data
    private fun filterDscData(kid: String): DscData = DscData(dscData.dscList.filter { it.kid == kid })
    private fun validator() = DscSignatureValidator()

    companion object {
        private const val DSC_LIST_BASE64 =
            "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"
        private val dscList: DscListOuterClass.DscList =
            DscListOuterClass.DscList.parseFrom(DSC_LIST_BASE64.decodeBase64()!!.toByteArray())
        private val dscData = DscData(
            dscList.certificatesList.map {
                DscItem(
                    it.kid.toOkioByteString().base64(),
                    it.data.toOkioByteString()
                )
            }
        )
    }
}

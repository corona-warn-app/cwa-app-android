package de.rki.coronawarnapp.covidcertificate.signature.core

import de.rki.coronawarnapp.covidcertificate.DaggerCovidCertificateTestComponent
import de.rki.coronawarnapp.covidcertificate.common.certificate.DccQrCodeExtractor
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_OID_MISMATCH_RC
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_OID_MISMATCH_TC
import de.rki.coronawarnapp.covidcertificate.common.exception.InvalidHealthCertificateException.ErrorCode.HC_DSC_OID_MISMATCH_VC
import de.rki.coronawarnapp.server.protocols.internal.dgc.DscListOuterClass
import okio.ByteString.Companion.decodeBase64
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import testhelpers.BaseTest
import de.rki.coronawarnapp.util.toOkioByteString
import io.kotest.assertions.throwables.shouldNotThrow
import io.kotest.assertions.throwables.shouldThrow
import io.kotest.matchers.shouldBe
import javax.inject.Inject

@Suppress("MaxLineLength")
class DscSignatureValidatorTest : BaseTest() {

    @Inject lateinit var extractor: DccQrCodeExtractor

    @BeforeEach
    fun setup() {
        DaggerCovidCertificateTestComponent.factory().create().inject(this)
    }

    /**
     * Test cases https://github.com/corona-warn-app/cwa-app-tech-spec/blob/78009f7e3aa6aef56892caedcfe478bfb9d4d691/docs/spec/dgc-overview-client.md#sample-data-for-protocol-buffer-message-for-dsclist
     */

    @Test
    fun `validating tc=fail, vc=fail, rc=pass - forRCsWithOID`() {
        val rc =

        val vc =
            "HC1:6BFOXN*TS0BI\$ZD8UHB0O. BQODJZ3G*H1*S1RO4.S-OPA+I AR4O78WAH-3+PEF/8X*G-O9UVPQRHIY1VS1NQ1 WUQRELS4 CT1HFUZ2T4D%*400T:O02\$4G.4++K+*4KCTUZKQHNP.0:NN6AL**IJP0CG7ZK75KN+*4.\$S6ZCJKB0WJMD3IFTG23N:IN1MPF5RBQ746B46O1N646RM9AL5CBVW566LH 467PPDFPVX1R270:6NEQ0R6\$46*PP:+P*.18.0+Q6846276PR6KK9%OCUF5LDC+G9QJPNF67J6NV6KNJ62K WJOWEYIALEE-7A%IA%DA9MGF:F81H23DLEE+-C/DD1JAA/CY3O0JK1WL*50JFTMD3QHBZQJD DF9RWS1J71/GHM-E3/6ZCV. 6:86DT1KV18YMAN6PMHWEM++V.DB+VI5SJKFE%0NQP5\$9K0WTUBU.SU/KKI2NIETF9J-MQ30KKA6XN653AT3OC03PTDZZQ*RVNHFWX5J+AHCS%TS-%CCVALQ6.20PE163"
        val tc =


        val dscData1 = filterDscData("3seKUa2SxU0=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_TC

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_VC

        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    @Test
    fun `validating tc=pass, vc=pass, rc=pass - forAllDCCsNoOID`() {
        val tc =

        val vc =

        val rc =


        val dscData1 = filterDscData("6LVeJLKcq3s=")
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    @Test
    fun `validating tc=fail, vc=pass, rc=fail - forVCsWithOID`() {
        val tc =

        val vc =

        val rc =
            "HC1:6BFOXN*TS0BI\$ZD-PH.SGLV7ULO81KY72I:ID+4WFNJ59V2S2/D-RISGVGKO-MPW\$NLEENKE\$JDVPLW1KD0KSKE MCAOIC.U2VA0*PE I: KH NH8JY\$NR+PC.UKMI4.1*-37CPOQ6AYP1KQ7 O4A7E:7LYP9TQH99+EQHCRCU7BDL8FF0D9E2LBHHGKLO-K%FGMIA6EAYHILIIX2MCJJJGI1JAF.7%TTP+P6OIB.VT*QNC2BFUF\$SU%BO*N5PIBPIAOI5XIXCLZRE/DD-B5V12JFQ%P82%KYZP8 FUL8W2BJH0NEQ:Q67ZMA\$6ERRF2MM*S\$USU6E%03E.SDFT3VCWQTY8TC6U8/DQMC:Y3XEO KU+*CJ8OSDDM\$7W:RA+JZ\$J64OP+B4EN1KMOZVKZ0MTO0HL5VFZYI3260NRYYDZ7V8\$TANV0CW+P1:6U5XM+S5*3P6RV4\$DX-EB50B1KZ3"
        val dscData1 = filterDscData("ACkfCcHlSWY=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_TC

        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_RC
    }

    @Test
    fun `validating tc=fail, vc=fail, rc=pass - forRCsWithOIDWithZero`() {
        val tc =

        val vc =

        val rc =

        val dscData1 = filterDscData("GEXba2UJLGM=")
        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(tc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_TC

        shouldThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(vc)) }
            .errorCode shouldBe HC_DSC_OID_MISMATCH_VC

        shouldNotThrow<InvalidHealthCertificateException> { validator().validateSignature(dscData1, dccData(rc)) }
    }

    private fun dccData(tc: String) = extractor.extract(tc).data
    private fun filterDscData(kid: String): DscData = DscData(dscData.dscList.filter { it.kid == kid })
    private fun validator() = DscSignatureValidator()

    companion object {
        private const val DSC_LIST_BASE64 =
            "CpwECgjotV4kspyrexKPBDCCAgswggGyoAMCAQICCQDRh2ekBKNX8TAJBgcqhkjOPQQBMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTAeFw0yMTA3MDkwNzUzNTRaFw0zMTA3MDcwNzUzNTRaMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDXU5fvrZZDcdiAqKbfWhqnMi9E7t/CXEUpTblpkmXBT2xtnT9PmGXe6Dv92VOD7r34f1VLit8ERwLzps2LmT7yjUjBQMA4GA1UdDwEB/wQEAwIHgDAdBgNVHQ4EFgQUTqtZ2URahUizQ00e28DEeSq2Vh4wHwYDVR0jBBgwFoAUv4YIQe0qsf2ePa9jlkIiQr3sgjkwCQYHKoZIzj0EAQNIADBFAiAqRxVnKCLKViaNOmeLBI/+O+ALp9u4YxBMVZABswRknwIhALOxFxDA4pJ+rK0O0D4Bw7QKpixkpOU9lGfRdJ0MHTqKCv0DCgiqyWBo4Fm+IxLwAzCCAewwggGUoAMCAQICCQDRh2ekBKNX8jAJBgcqhkjOPQQBMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTAeFw0yMTA3MDkwNzUzNTRaFw0zMTA3MDcwNzUzNTRaMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCb2BIAdfBgEZkR7t5KeRbAfS5bjprnumNqe4GioEnCVxV47CEn2OPSi7PzyUcYrgJlVstKuvi2nPNvcwSZzn16jNDAyMDAGA1UdJQQpMCcGCysGAQQBjjePZQEBBgsrBgEEAY43j2UBAgYLKwYBBAGON49lAQMwCQYHKoZIzj0EAQNHADBEAiBbmghMPME9KAEYB6G4bTqAA1G95fx9BieRVxRrbqNxsAIgW8Qmt0OByyyxz3XTZWKGvt+fXIVYAwgqCBtSJQG1rdwKgQQKCGbjCsWOqUK/EvQDMIIB8DCCAZegAwIBAgIJANGHZ6QEo1fzMAkGByqGSM49BAEwYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMB4XDTIxMDcwOTA3NTM1NFoXDTMxMDcwNzA3NTM1NFowYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAER5/DPdmNf7+vr+hi7mniXJK2GYPEonCbm01zV8PZfZwJFYwixkWtfkD657NrEIgp//xbrER/UYzmDhzl0k4oO6M3MDUwMwYDVR0lBCwwKgYMKwYBBAEAjjePZQEBBgwrBgEEAQCON49lAQIGDCsGAQQBAI43j2UBAzAJBgcqhkjOPQQBA0gAMEUCIFLRZGF811sKVxNTjcEdHl7/dU5rK3VdGDRjeTiPW0znAiEAm4XVyipg3GVdoz+weCmOr2QYBLcHlF8KQe7MMnWQcKQK4wMKCAApHwnB5UlmEtYDMIIB0jCCAXqgAwIBAgIJANGHZ6QEo1f2MAkGByqGSM49BAEwYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMB4XDTIxMDcwOTA3NTM1NFoXDTMxMDcwNzA3NTM1NFowYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEiKleLmeU4i6alHoxRlrrj/BxVwbFWW3qavAli5qvUegMuNk3/Y6lcgoJZ4HhztBwoKeLAaoi2DlHT3hoMf/DM6MaMBgwFgYDVR0lBA8wDQYLKwYBBAGON49lAQIwCQYHKoZIzj0EAQNHADBEAiB697w8TCyiSnenwfTpJgqB1c3+PiH5xa3FzhS6nItUAwIgTItpSG2e9eJzTuc40vJ0uj/LgzvqAe0yzFOmvS5zGYUK5QMKCC51mggqxP58EtgDMIIB1DCCAXugAwIBAgIJANGHZ6QEo1f3MAkGByqGSM49BAEwYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMB4XDTIxMDcwOTA3NTM1NFoXDTMxMDcwNzA3NTM1NFowYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2FFYbm7R+V9OVwYZgD0vY+GQxvnPAwDqxwUq+0vo38QmLzsFdO8WxA0L3aKFiv37sqgh806r6U++03EpIXL0yaMbMBkwFwYDVR0lBBAwDgYMKwYBBAEAjjePZQECMAkGByqGSM49BAEDSAAwRQIhALD9IOuFdNKGJ8bRsBad0mqEeF9E1tNKsaY5RrDlDEo1AiArmRd7xpQDxC8lVd3FiThHKGbD4pRkXAIksI5sVpJMiwrkAwoIU5lI1XIimH0S1wMwggHTMIIBeqADAgECAgkA0YdnpASjV/QwCQYHKoZIzj0EATBiMQswCQYDVQQGEwJERTELMAkGA1UECAwCQlcxETAPBgNVBAcMCFdhbGxkb3JmMQ8wDQYDVQQKDAZTQVAgU0UxEDAOBgNVBAsMB0NXQSBDTEkxEDAOBgNVBAMMB2N3YS1jbGkwHhcNMjEwNzA5MDc1MzU0WhcNMzEwNzA3MDc1MzU0WjBiMQswCQYDVQQGEwJERTELMAkGA1UECAwCQlcxETAPBgNVBAcMCFdhbGxkb3JmMQ8wDQYDVQQKDAZTQVAgU0UxEDAOBgNVBAsMB0NXQSBDTEkxEDAOBgNVBAMMB2N3YS1jbGkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQmntSHYSYdhDg79bMBriIIMTw1vll4caXqJjAMdhcbrlBv4MPtKlw5bWjn8d9XYRkuqvkaZXo3qzEr8g+YH5pKoxowGDAWBgNVHSUEDzANBgsrBgEEAY43j2UBATAJBgcqhkjOPQQBA0gAMEUCIQCUVWZcRetkS1eXcZYmDJ8dJX0OG/xMu1RI7Al1GHJrgQIgQj4E38Gma/B9q3Xir2ea3RK79joAWiuXlPRpAHaKv0AK5AMKCLvS0o5us4TTEtcDMIIB0zCCAXugAwIBAgIJANGHZ6QEo1f1MAkGByqGSM49BAEwYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMB4XDTIxMDcwOTA3NTM1NFoXDTMxMDcwNzA3NTM1NFowYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEwje5dsNGZvGSkwA4jQg9UVCvh3CPct5+P8ohR8PMs7rGdL4tTWJi7lScy/IRbe6F74reDAuD3rsHAYQr/P+yaKMbMBkwFwYDVR0lBBAwDgYMKwYBBAEAjjePZQEBMAkGByqGSM49BAEDRwAwRAIgS5/I26TbsHfq5jPyl7HmStVhne0c8N7eceK8FRNdErUCIH78ryLy0S6cJsi0tW68ZyRKXk+wrtYUD0o6m/VLYfvPCuMDCgjex4pRrZLFTRLWAzCCAdIwggF6oAMCAQICCQDRh2ekBKNX+DAJBgcqhkjOPQQBMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTAeFw0yMTA3MDkwNzUzNTRaFw0zMTA3MDcwNzUzNTRaMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBxSH9J7NeX54unJS+2ruB6c/7dgyfuMf1Qvd/LZpqSNUmT3UkqUzi3sdpEoFJBF9SJpG7xlHQqIKE2nWmAKLK6jGjAYMBYGA1UdJQQPMA0GCysGAQQBjjePZQEDMAkGByqGSM49BAEDRwAwRAIgdzQoYeT4bpZdji6s22B2lyV8XRJmktzCuERRHRP9CUsCIHHoON8gNaf2Iabin9SytiMrqMGk3kOO5Bm5ADYVPx6jCuUDCggYRdtrZQksYxLYAzCCAdQwggF7oAMCAQICCQDRh2ekBKNX+TAJBgcqhkjOPQQBMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTAeFw0yMTA3MDkwNzUzNTRaFw0zMTA3MDcwNzUzNTRaMGIxCzAJBgNVBAYTAkRFMQswCQYDVQQIDAJCVzERMA8GA1UEBwwIV2FsbGRvcmYxDzANBgNVBAoMBlNBUCBTRTEQMA4GA1UECwwHQ1dBIENMSTEQMA4GA1UEAwwHY3dhLWNsaTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABOXEoZD/OqQsKSqQ/RmAxIRrDBOXGcaRDl+/2n7bBPJIwhnuLI7TXTjIyLn00qR9dq+0vaQVPI3iO05rRSCVjHajGzAZMBcGA1UdJQQQMA4GDCsGAQQBAI43j2UBAzAJBgcqhkjOPQQBA0gAMEUCIQCfn5bXxbzhuXmpeMGvrL/4I2Syk10HCZ09rifUm4ai1gIgHIYT+794tIp2EpgfS4m0S/3Qhn6J1ZJPqULIxqoEY3YKnQQKCIQHqL0eFdMgEpAEMIICDDCCAbKgAwIBAgIJANGHZ6QEo1f7MAkGByqGSM49BAEwYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMB4XDTIxMDcwOTEzMzY1NloXDTIxMDcxMDEzMzY1NlowYjELMAkGA1UEBhMCREUxCzAJBgNVBAgMAkJXMREwDwYDVQQHDAhXYWxsZG9yZjEPMA0GA1UECgwGU0FQIFNFMRAwDgYDVQQLDAdDV0EgQ0xJMRAwDgYDVQQDDAdjd2EtY2xpMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE4AX+nC5rHQd8VZbsATS+jO7LtLNZUs/Lo/YMw1/tb5si1xNHJel0DqiQj0rYf8ylPWq+4ghPcOrZr62e9yVwDaNSMFAwDgYDVR0PAQH/BAQDAgeAMB0GA1UdDgQWBBRpZH0bn2jUDNGU344Zi0gYSxBTTTAfBgNVHSMEGDAWgBS/hghB7Sqx/Z49r2OWQiJCveyCOTAJBgcqhkjOPQQBA0kAMEYCIQCro3URao1c+tnDrlII5bWQajXZl8bPKTDOZfG5IpAvfwIhAMv146/BKNIubPTJd6/PDZ+gyKiNp4j+UURF4AhD+EC9Cp4ECgiVVSD8UxJFXhKRBDCCAg0wggGzoAMCAQICCQDRh2ekBKNX+jAKBggqhkjOPQQDAjBiMQswCQYDVQQGEwJERTELMAkGA1UECAwCQlcxETAPBgNVBAcMCFdhbGxkb3JmMQ8wDQYDVQQKDAZTQVAgU0UxEDAOBgNVBAsMB0NXQSBDTEkxEDAOBgNVBAMMB2N3YS1jbGkwHhcNMzEwMTA0MTIwNTUyWhcNNDEwMTAxMTIwNTUyWjBiMQswCQYDVQQGEwJERTELMAkGA1UECAwCQlcxETAPBgNVBAcMCFdhbGxkb3JmMQ8wDQYDVQQKDAZTQVAgU0UxEDAOBgNVBAsMB0NXQSBDTEkxEDAOBgNVBAMMB2N3YS1jbGkwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARfGw+Ed6QubOCEoglZGK6IP12ECbDCgw2ghO8IVtfFuFjEgVDe5pSP7OdShpqlIAr874EVJDv4hrp5vu/IfYG7o1IwUDAOBgNVHQ8BAf8EBAMCB4AwHQYDVR0OBBYEFFOV0esQ3mWGV0QA38qrb5+zORn7MB8GA1UdIwQYMBaAFL+GCEHtKrH9nj2vY5ZCIkK97II5MAoGCCqGSM49BAMCA0gAMEUCIB5sc2e5+AIpchjkFnUO+6sW6eojNO7NASC7CQEvq71zAiEAoUusMyFeIgjhwubhgcGbpOzAso0uYuD0iycljd81nlo="
        private val dscList: DscListOuterClass.DscList =
            DscListOuterClass.DscList.parseFrom(DSC_LIST_BASE64.decodeBase64()!!.toByteArray())
        private val dscData = DscData(
            dscList.certificatesList.map {
                DscItem(
                    it.kid.toOkioByteString().base64(),
                    it.data.toOkioByteString()
                )
            }
        )
    }
}

package de.rki.coronawarnapp.srs.core.error

import timber.log.Timber

class SrsSubmissionException(
    val errorCode: ErrorCode,
    override val cause: Throwable? = null
) : Exception(errorCode.code, cause) {

    enum class ErrorCode(val code: String) {
        DEVICE_TIME_INCORRECT("DEVICE_TIME_INCORRECT"),
        DEVICE_TIME_UNVERIFIED("DEVICE_TIME_UNVERIFIED"),
        SRS_OTP_CLIENT_ERROR("SRS_OTP_CLIENT_ERROR"),
        SRS_OTP_NO_NETWORK("SRS_OTP_NO_NETWORK"),
        SRS_OTP_SERVER_ERROR("SRS_OTP_SERVER_ERROR"),
        SRS_OTP_400("SRS_OTP_400"),
        SRS_OTP_401("SRS_OTP_401"),
        SRS_OTP_403("SRS_OTP_403"),
        SRS_SUB_CLIENT_ERROR("SRS_SUB_CLIENT_ERROR"),
        SRS_SUB_NO_NETWORK("SRS_SUB_NO_NETWORK"),
        SRS_SUB_SERVER_ERROR("SRS_SUB_SERVER_ERROR"),
        SRS_SUB_400("SRS_SUB_400"),
        SRS_SUB_403("SRS_SUB_403"),
        TIME_SINCE_ONBOARDING_UNVERIFIED("TIME_SINCE_ONBOARDING_UNVERIFIED"),
        SUBMISSION_TOO_EARLY("SUBMISSION_TOO_EARLY"),

        // Local
        ANDROID_ID_INVALID_LOCAL("ANDROID_ID_INVALID_LOCAL"),
        ATTESTATION_FAILED("ATTESTATION_FAILED"),
        ATTESTATION_REQUEST_FAILED("ATTESTATION_REQUEST_FAILED"),
        PLAY_SERVICES_VERSION_MISMATCH("PLAY_SERVICES_VERSION_MISMATCH"),
        NONCE_MISMATCH("NONCE_MISMATCH"),
        BASIC_INTEGRITY_REQUIRED("BASIC_INTEGRITY_REQUIRED"),
        CTS_PROFILE_MATCH_REQUIRED("CTS_PROFILE_MATCH_REQUIRED"),
        EVALUATION_TYPE_BASIC_REQUIRED("EVALUATION_TYPE_BASIC_REQUIRED"),
        EVALUATION_TYPE_HARDWARE_BACKED_REQUIRED("EVALUATION_TYPE_HARDWARE_BACKED_REQUIRED"),

        // Server
        ANDROID_ID_INVALID("ANDROID_ID_INVALID"),
        APK_CERTIFICATE_MISMATCH("APK_CERTIFICATE_MISMATCH"),
        APK_PACKAGE_NAME_MISMATCH("APK_PACKAGE_NAME_MISMATCH"),
        ATTESTATION_EXPIRED("ATTESTATION_EXPIRED"),
        DEVICE_QUOTA_EXCEEDED("DEVICE_QUOTA_EXCEEDED"),
        JWS_SIGNATURE_VERIFICATION_FAILED("JWS_SIGNATURE_VERIFICATION_FAILED"),
        SALT_REDEEMED("SALT_REDEEMED");

        companion object {
            fun fromAuthErrorCode(code: String) = values().find { code == it.code } ?: run {
                Timber.e("ErrorCode=%s was not found -> return SRS_OTP_SERVER_ERROR as fallback", code)
                SRS_OTP_SERVER_ERROR
            }
        }
    }
}

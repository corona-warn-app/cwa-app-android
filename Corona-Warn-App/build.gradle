apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'jacoco'


def environmentExtractor = { File path ->
    def rawJson = path.text
    def escapedJson = rawJson.replace("\"", "\\\"").replace("\n", "").replace("\r", "")
    return "\"${escapedJson}\""
}


android {
    println("Current VERSION_MAJOR: ${VERSION_MAJOR}")
    println("Current VERSION_MINOR: ${VERSION_MINOR}")
    println("Current VERSION_PATCH: ${VERSION_PATCH}")
    println("Current VERSION_BUILD: ${VERSION_BUILD}")

    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId 'de.rki.coronawarnapp'
        minSdkVersion 23
        targetSdkVersion 29

        ndkVersion "21.2.6472646"

        versionCode(
                VERSION_MAJOR.toInteger() * 1000000
                        + VERSION_MINOR.toInteger() * 10000
                        + VERSION_PATCH.toInteger() * 100
                        + VERSION_BUILD.toInteger()
        )
        println("Used versionCode: $versionCode")

        versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
        println("Used versionName: $versionName")

        testInstrumentationRunner "testhelpers.TestApplicationUIRunner"

        resConfigs "de", "en", "tr", "bg", "pl", "ro"

        def prodEnvJson = environmentExtractor(file("../prod_environments.json"))
        buildConfigField "String", "ENVIRONMENT_JSONDATA", prodEnvJson

        if (project.hasProperty("commit_hash")) {
            buildConfigField "String", "GIT_COMMIT_SHORT_HASH", "\"$commit_hash\""
        } else {
            buildConfigField "String", "GIT_COMMIT_SHORT_HASH", "\"no commit hash\""
        }

        def devEnvironmentFile = file("../test_environments.json")
        if (devEnvironmentFile.exists()) {
            def devEnvJson = environmentExtractor(devEnvironmentFile)
            buildConfigField "String", "ENVIRONMENT_JSONDATA", devEnvJson
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        buildConfigField "int", "VERSION_MAJOR", VERSION_MAJOR
        buildConfigField "int", "VERSION_MINOR", VERSION_MINOR
        buildConfigField "int", "VERSION_PATCH", VERSION_PATCH

        vectorDrawables.useSupportLibrary = true
    }

    def signingPropFile = file("../keystore.properties")
    if (signingPropFile.canRead()) {
        Properties signingProps = new Properties()
        signingProps.load(new FileInputStream(signingPropFile))
        signingConfigs {
            deviceRelease {
                if (signingProps['deviceRelease.storePath'] != null) {
                    storeFile file(signingProps['deviceRelease.storePath'])
                    keyAlias signingProps['deviceRelease.keyAlias']
                    storePassword signingProps['deviceRelease.storePassword']
                    keyPassword signingProps['deviceRelease.keyPassword']
                }
            }
            deviceForTestersRelease {
                if (signingProps['deviceForTestersRelease.storePath'] != null) {
                    storeFile file(signingProps['deviceForTestersRelease.storePath'])
                    keyAlias signingProps['deviceForTestersRelease.keyAlias']
                    storePassword signingProps['deviceForTestersRelease.storePassword']
                    keyPassword signingProps['deviceForTestersRelease.keyPassword']
                }
            }
        }
    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    flavorDimensions "version"
    productFlavors {
        device {
            dimension "version"
            resValue "string", "app_name", "Corona-Warn"

            ext {
                envTypeDefault = [debug: "INT", release: "PROD"]
            }

            if (signingPropFile.canRead()) {
                signingConfig signingConfigs.deviceRelease
            }
        }
        deviceForTesters {
            // Contains test fragments
            dimension "version"
            resValue "string", "app_name", "CWA TEST"
            applicationIdSuffix '.test'

            ext {
                envTypeDefault = [debug: "INT", release: "WRU-XD"]
            }

            if (signingPropFile.canRead()) {
                signingConfig signingConfigs.deviceForTestersRelease
            }
        }
    }
    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0]
        def typeName = variant.buildType.name // debug/release
        variant.buildConfigField "String", "ENVIRONMENT_TYPE_DEFAULT", "\"${flavor.envTypeDefault[typeName]}\""

        if (flavor.name == "deviceForTesters") {
            def adjustedVersionName = "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}-RC${VERSION_BUILD}"
            variant.outputs.each { output ->
                output.versionNameOverride = adjustedVersionName
            }
            println("deviceForTesters adjusted versionName: $adjustedVersionName")
        }
        if (flavor.name != "device") {
            variant.outputs.each { output ->
                def apkName = "Corona-Warn-App-${output.versionNameOverride}-${flavor.name}-${variant.buildType.name}.apk"
                println("Override APK Name: $apkName")
                output.outputFileName = apkName
            }
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"

            freeCompilerArgs += [
                    "-Xno-kotlin-nothing-value-exception",
                    "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                    "-Xuse-experimental=kotlinx.coroutines.FlowPreview",
                    "-Xuse-experimental=kotlin.time.ExperimentalTime",
                    "-Xopt-in=kotlin.RequiresOptIn"
            ]
        }
    }

    lintOptions {
        checkAllWarnings = true
        // this rule is broken on 2.3.0
        // see the following issue: https://issuetracker.google.com/issues/169249668
        disable 'NullSafeMutableLiveData'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            if (project.hasProperty('testFilter')) {
                List<String> props = project.getProperties().get("testFilter").split("\\s+")
                props.each {
                    def replaced = it
                            .replaceFirst("^(Corona-Warn-App/src/test.*/java/)(.+)\$", "**/\$2")
                            .replace(".kt", ".class")
                    project.logger.lifecycle("testFilter File: before=$it, after=$replaced")
                    include(replaced)
                }
            }
        }
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }

        // Using orchestration together with mockk on x86 (32bit) emulator images crashes
        // Leaving this in here as reminder
        // https://github.com/android/android-test/issues/352
        // https://github.com/mockk/mockk/issues/466
        // execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    kapt {
        useBuildCache true
        includeCompileClasspath = false
    }
    dexOptions {
        preDexLibraries true
    }
    packagingOptions {
        exclude "**/module-info.class"
        exclude 'NOTICE'
        exclude 'LICENSE'
        exclude 'CODEOWNERS'
        exclude 'README.md'
        exclude 'CODE_OF_CONDUCT.md'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    sourceSets {
        deviceForTesters {
            kotlin {
                srcDirs = ['src/deviceForTesters']
            }
            res {
                srcDirs 'src/deviceForTesters/res', 'src/deviceForTesters/res/navigation'
            }
        }
        device {
            kotlin {
                srcDirs = ['src/device']
            }
        }
        test {
            java.srcDirs += "$projectDir/src/testShared/java"
        }
        androidTest {
            java.srcDirs += "$projectDir/src/testShared/java"
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }
}

task jacocoTestReportDeviceRelease(type: JacocoReport, dependsOn: 'testDeviceReleaseUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the DeviceRelease build."

    reports {
        html.enabled = false
        xml {
            enabled = true
            destination file("$buildDir/reports/jacoco/deviceRelease/jacoco.xml")
        }
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*$$*',
    ]

    def classPaths = [
            "**/intermediates/classes/deviceRelease/**",
            "**/intermediates/javac/deviceRelease/*/classes/**", // Android Gradle Plugin 3.2.x support.
            "**/intermediates/javac/deviceRelease/classes/**", // Android Gradle Plugin 3.4 and 3.5 support.
            "**/tmp/kotlin-classes/deviceRelease/**"
    ]

    def debugTree = fileTree(dir: "$buildDir", includes: classPaths, excludes: excludes)
    def mainSrc = "src/main/java"

    getSourceDirectories().from(files([mainSrc]))
    getClassDirectories().from(files([debugTree]))
    getExecutionData().from(fileTree(dir: "$buildDir", includes: ["jacoco/testDeviceReleaseUnitTest.exec"]))
}

dependencies {
    // KOTLIN
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:_"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:_"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:_"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:_"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:_"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:_"

    // ANDROID STANDARD
    implementation 'androidx.appcompat:appcompat:_'
    implementation 'androidx.core:core-ktx:_'
    implementation 'com.google.android.material:material:_'
    implementation 'androidx.constraintlayout:constraintlayout:_'
    implementation "androidx.navigation:navigation-fragment-ktx:_"
    implementation "androidx.navigation:navigation-ui-ktx:_"
    implementation 'androidx.legacy:legacy-support-v4:_'
    implementation 'androidx.preference:preference-ktx:_'
    implementation 'androidx.work:work-runtime-ktx:_'

    implementation 'androidx.lifecycle:lifecycle-common-java8:_'
    implementation 'androidx.lifecycle:lifecycle-process:_'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:_'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:_'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:_'

    implementation 'androidx.annotation:annotation:_'
    implementation "androidx.recyclerview:recyclerview:_"
    implementation "androidx.recyclerview:recyclerview-selection:_"

    // DAGGER
    implementation "com.google.dagger:dagger:_"
    implementation "com.google.dagger:dagger-android:_"
    implementation "com.google.dagger:dagger-android-support:_"
    kapt "com.google.dagger:dagger-compiler:_"
    kaptTest "com.google.dagger:dagger-compiler:_"
    kaptAndroidTest "com.google.dagger:dagger-compiler:_"
    kapt "com.google.dagger:dagger-android-processor:_"
    kaptTest "com.google.dagger:dagger-android-processor:_"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:_"

    // QR
    implementation('com.journeyapps:zxing-android-embedded:_') { transitive = false }
    // noinspection GradleDependency - needed for SDK 23 compatibility, in combination with com.journeyapps:zxing-android-embedded:4.1.0
    implementation 'com.google.zxing:core:_'

    //ENA
    implementation files('libs/play-services-nearby-exposurenotification-18.0.3.aar')

    // Testing
    testImplementation "androidx.arch.core:core-testing:_"
    testImplementation('org.robolectric:robolectric:_') {
        exclude group: 'com.google.protobuf'
    }
    testImplementation "io.mockk:mockk:_"
    testImplementation "com.squareup.okhttp3:mockwebserver:_"
    testImplementation 'org.hamcrest:hamcrest-library:_'

    // Testing - jUnit4
    testImplementation 'junit:junit:_'
    testImplementation "org.junit.vintage:junit-vintage-engine:_"
    testImplementation "androidx.test:core-ktx:_"


    // Testing - jUnit5
    testImplementation "org.junit.jupiter:junit-jupiter-api:_"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:_"
    testImplementation "org.junit.jupiter:junit-jupiter-params:_"

    testImplementation "io.kotest:kotest-runner-junit5:_"
    testImplementation "io.kotest:kotest-assertions-core-jvm:_"
    testImplementation "io.kotest:kotest-property-jvm:_"
    androidTestImplementation "io.kotest:kotest-assertions-core-jvm:_"
    androidTestImplementation "io.kotest:kotest-property-jvm:_"

    testImplementation "io.github.classgraph:classgraph:_"

    // Testing - Instrumentation
    androidTestImplementation 'junit:junit:_'
    androidTestImplementation 'androidx.test:runner:_'
    androidTestImplementation 'androidx.test.ext:junit:_'
    androidTestImplementation 'androidx.test.espresso:espresso-core:_'
    androidTestImplementation 'androidx.test:rules:_'
    androidTestImplementation 'androidx.test.ext:truth:_'
    androidTestImplementation 'androidx.work:work-testing:_'
    androidTestImplementation "io.mockk:mockk-android:_"
    debugImplementation 'androidx.fragment:fragment-testing:_'
    debugImplementation 'androidx.test:core-ktx:_'

    androidTestImplementation 'tools.fastlane:screengrab:_'
    androidTestImplementation "androidx.navigation:navigation-testing:_"

    // Play Services
    implementation 'com.google.android.play:core:_'
    implementation 'com.google.android.gms:play-services-base:_'
    implementation 'com.google.android.gms:play-services-basement:_'
    implementation 'com.google.android.gms:play-services-safetynet:_'
    implementation 'com.google.android.gms:play-services-tasks:_'

    // HTTP
    implementation 'com.squareup.retrofit2:retrofit:_'
    implementation 'com.squareup.retrofit2:converter-gson:_'
    implementation('com.squareup.retrofit2:converter-protobuf:_') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    implementation("com.squareup.okhttp3:logging-interceptor:_")
    implementation 'com.squareup.okhttp3:okhttp:_'

    // PERSISTENCE
    implementation "androidx.sqlite:sqlite-ktx:_"
    implementation "androidx.room:room-runtime:_"
    implementation "androidx.room:room-ktx:_"
    implementation "androidx.room:room-guava:_"
    kapt "androidx.room:room-compiler:_"
    androidTestImplementation "androidx.room:room-testing:_"

    // UTILS
    implementation project(":Server-Protocol-Buffer")
    implementation 'com.google.code.gson:gson:_'
    implementation 'com.google.guava:guava:_'
    implementation 'joda-time:joda-time:_'

    // SECURITY
    implementation "androidx.security:security-crypto:1.0.0-rc03"
    implementation 'net.zetetic:android-database-sqlcipher:_'
    implementation 'org.conscrypt:conscrypt-android:_'

    // LOGGING
    implementation 'com.jakewharton.timber:timber:4.7.1@aar'

    // ANIMATIONS
    implementation "com.airbnb.android:lottie:_"
}

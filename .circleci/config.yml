version: 2.1
orbs:
  android: circleci/android@0.2.1
  sonarcloud: sonarsource/sonarcloud@1.0.2
commands:
  install-ndk: android/install-ndk
  restore-android-build-cache: android/restore-build-cache
  save-android-build-cache: android/save-build-cache
  scan-sonar: sonarcloud/scan
  restore-gradle-cache:
    description: "Restore gradle caches"
    steps:
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "Corona-Warn-App/build.gradle" }}-{{ checksum  "Server-Protocol-Buffer/build.gradle" }}
  save-gradle-cache:
    description: "Save gradle caches"
    steps:
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "Corona-Warn-App/build.gradle" }}-{{ checksum  "Server-Protocol-Buffer/build.gradle" }}
  require-version-bump:
    description: "Require version bump for binary assembling"
    steps:
      - run:
          name: "Check if assemble required"
          command: |
            last_commit=$(git log -1 --pretty=%B)
            if [[ $last_commit != *"Version bump"* ]]; then
              circleci-agent step halt
              echo "Skipping job"
            fi

jobs:
  prepare_project:
    executor: android/android
    resource_class: large
    steps:
      - checkout
      - restore-gradle-cache
      - restore-android-build-cache
      - run:
          name: Prepare project
          command: ./gradlew -PdisablePreDex --no-daemon --max-workers=2 androidDependencies
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - save-gradle-cache
      - save-android-build-cache
      - persist_to_workspace:
          root: ./
          paths:
            - .gradle
            - .android
            - project
  quick_build_release_no_tests:
    executor: android/android
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - require-version-bump
      - install-ndk:
          ndk-sha: "c81a5bcb4672a18d3647bf6898cd4dbcb978d0e8"
          ndk-version: "android-ndk-r21c"
      - run:
          name: Quick Build
          command: ./gradlew assembleDeviceRelease
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
  quick_build_for_testers_no_tests:
    executor: android/android
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - require-version-bump
      - install-ndk:
          ndk-sha: "c81a5bcb4672a18d3647bf6898cd4dbcb978d0e8"
          ndk-version: "android-ndk-r21c"
      - run:
          name: Quick Build
          command: ./gradlew :Corona-Warn-App:assembleDeviceForTestersRelease
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
  device_release_unit_tests:
    executor: android/android
    resource_class: large
    parallelism: 4
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: test splitting output
          command: circleci tests glob "**/test*/**/*.kt" | circleci tests split | xargs -n 1 echo
      - run:
          name: Unit tests
          command: ./gradlew :Corona-Warn-App:testDeviceReleaseUnitTest -i -PtestFilter="`circleci tests glob "**/test*/**/*.kt" | circleci tests split`"
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
      - store_test_results:
          path: Corona-Warn-App/build/test-results
  device_for_testers_release_unit_tests:
    executor: android/android
    resource_class: large
    parallelism: 4
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: test splitting output
          command: circleci tests glob "**/test*/**/*.kt" | circleci tests split | xargs -n 1 echo
      - run:
          name: Unit tests
          command: ./gradlew :Corona-Warn-App:testDeviceForTestersReleaseUnitTest -i -PtestFilter="`circleci tests glob "**/test*/**/*.kt" | circleci tests split`"
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
      - store_test_results:
          path: Corona-Warn-App/build/test-results
  lint_device_release_check:
    executor: android/android
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Lint check device release
          command: ./gradlew --profile :Corona-Warn-App:lintDeviceRelease
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
  ktlint_device_release_check:
    executor: android/android
    resource_class: medium
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Ktlint check device release
          command: ./gradlew :Corona-Warn-App:ktlintDeviceReleaseCheck
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
  lint_device_for_testers_check:
    executor: android/android
    resource_class: large
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Lint check device for testers
          command: ./gradlew --profile :Corona-Warn-App:lintDeviceForTestersRelease
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
  ktlint_device_for_testers_release_check:
    executor: android/android
    resource_class: medium
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Ktlint check device for testers
          command: ./gradlew :Corona-Warn-App:ktlintDeviceForTestersReleaseCheck
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
  detekt:
    executor: android/android
    resource_class: medium
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Detekt check
          command: ./gradlew :Corona-Warn-App:detekt
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - store_artifacts:
          path: Corona-Warn-App/build/reports
          destination: reports
  run_sonar:
    executor: android/android
    resource_class: medium
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: JaCoCo report
          command: ./gradlew :Corona-Warn-App:jacocoTestReportDeviceRelease -i
          environment:
            JVM_OPTS: -Xmx2048m
            GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false
      - run:
          name: Skip SonarCloud for external Pull Requests
          command: '[[ -v CIRCLE_PR_REPONAME ]] && circleci-agent step halt || true'
      - scan-sonar
  test_task:
    executor: android/android
    resource_class: small
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Scan workspace
          command: find ./
workflows:
  version: 2
  quick_build:
    jobs:
      - prepare_project
      - test_task:
          requires:
            - prepare_project
      - quick_build_release_no_tests:
          requires:
            - prepare_project
      - quick_build_for_testers_no_tests:
          requires:
            - prepare_project
      - device_release_unit_tests:
          requires:
            - prepare_project
      - device_for_testers_release_unit_tests:
          requires:
            - prepare_project
      - lint_device_release_check:
          requires:
            - prepare_project
      - lint_device_for_testers_check:
          requires:
            - prepare_project
      - ktlint_device_release_check:
          requires:
            - prepare_project
      - ktlint_device_for_testers_release_check:
          requires:
            - prepare_project
      - detekt:
          requires:
            - prepare_project
      - run_sonar:
          requires:
            - prepare_project
